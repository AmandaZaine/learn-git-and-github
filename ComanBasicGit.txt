my repo: https://github.com/AmandaZaine/learn-git-and-github.git

Basic commands used by me

cd nomedapasta >> serve para entrar em uma pasta

cd local1/local2/local3 >> serve para entra na pasta desejada com apenas um comando

cd ..  >> serve para sair de uma pasta/”volta para pasta anterior”

ls  >> serve para ver oque tem dentro da pasta/”mostra para onde pode ir”

clear  >> limpar comandos da tela

git init >> cria um repositório na pasta atual da sua localização atual de acordo com o terminal  //

git status >> status atual do seu repositório

git add nomedoarquivo.suaextensao >> adiciona o arquivo no seu controle de versao

git add *.txt  >> adiciona todos os arquivos txt

git add .  >> adiciona todos os arquivos que estiverem no seu diretório

git add *.extensao  >> adiciona todos os arquivos de uma determinada extensão

git add -A  >> adiciona todos os arquivos que tem na pasta e atualiza o repositório

	git add >> sai do work directory e vai/passa os arquivos para as "staging area"

git commit -m "Mensagem de identificação do commit"  >>  tira da staging area e manda para repositorio // commit=salvar  // congela uma determinada versão do código

	>> Working directory: local onde voce adiciona novos arquivos ou edita arquivos existentes

	>> Staging area: local para onde os arquivos vao quando usa-se o comando git add

	>> Repositorio: local para onde vai os arquivos quando voce usa o comando git commit // quando termina o trabalho

.gitignore  >>  nome de arquivo que o git ignora

git commit -a -m "Mensagem de identificação do commit"   >>  pula a etada do git add e vai direto para o git commit

git remote add origin linkdogithub  >>  define para onde estamos enviando o código // conecta meu repo a um servidor remoto

git remote rm origin    >>   remove a origem do repo remoto

git push -u origin master  >>  envia para o github/envia alteração para repositorio remoto

git push  >> salva as atualizações no github

		~~ Comandos da aula 3 ~~

git diff  >> para consultar todas as informações do seu arquivo que está no seu diretorio mas ainda nao foi adicionado para a staging area 

git diff nomeDoArquivo    >>   Para ver as modificações feitas num arq.

git add . >> adiciona o arquivo na staging area // começa a monitorar os arquivos no repo do GitHub

git diff --staged  >>  para saber oque está na staging area e que vai ser enviado para o proximo commit

git log  >>  mostra todos os commits que foram feitos/ historico de commit

git log -p  >> mostra informações detalhadas dos commits

q   >>  volta para o terminal

git log -p -n  >> mostra committs especificos // n = numeros de commits que voce quer que apareça

gitk  >> gera relatório com todas as modificações/alterações

		~~ Comandos Aula 4  ~~

git log --pretty=oneline  >>  serve para mostrar somente o código de cada commit e a mensagem desse commit

git add .

git commit --amend -m "Nova mensagem do commit" -> git push --force  >> alterar o comentário (mensagem) do último commit quando o commit já foi enviado para um repositório remoto

git checkout nomedoarquivo.suaextensão >> descarta as mudanças num arquivo, o arquivo volta ao estado inicial do ultimo commit (só funciona antes do arquivo ser adicionado com o git add)
git checkout . >> descarta todas as mudanças

git rm nomedoarquivo.suaextensão  >>  para remover do repositório arquivos que foram deletados

pwd >> mostra em que pasta que terminal GitBash “está”

tab >> faz autocomplite

mkdir nomePastaNova  >> Cria uma pasta nova no local que o terminal “está”

touch >> cria arquivo novo dentro da pasta que o terminal “está”

open >> abre arquivo que esta dentro da pasta que o terminal “está”

code .   >> abre o visual code na pasta q vc esta com os arquivos que tem dentro

rmdir NomeDasPastas >> q quer deletar/remove diretorio em branco

rm nomeDoArquvio >> deleta arquivo especifico

rm -r nomeDaPasta >> q quer deletar, pasta q tem arquivo dentro

cp >> copiar arquivo 

mv  >> mover arquivo

quit ou exit >> sai do GitBash

git –help >> ver comandos do GitBash

git –version     //  git --version

git pull >> pega infos do rep online e envia para rep local no computador

cat .git/config

git log --oneline  >> Ver commit anteriores em forma de lista

git pull upstream master

git remote   >>   Para ver qual é o repo remoto

git remote add upstream  URLdoRepo    >>   adicionando um remoto upstream com a URL fornecida

git push origin master

git pull

git remote   >>  para ver um repo remoto

git remote -v   >>  mostra todos os repos remotos listados, com até a URL do repo

git clone linkPegoNoCloneOrDownloadNoGitHub

git pull upstream master

git pull origin master

git push origin nomedabranch

git pull upstream nomeDaBranch

git pull origin nomeDaBranch

git merge nomeDaBranchQueDesejaSeMergear  >>  (tem que estar em uma branch já) Faz o merge da branch que o usuário está dentro do GitBash com a branch que o usuário informa no comando

git merge nomeDaBranchQueDesejaSeMergear -m "mensagemAoFazerMerge"

git restore .
git restore --staged <nome-do-arquivo>    >>  Remove o arquivo da staging area, desfazendo o comando git add que foi executado anteriormente
git reset HEAD nomedoarquivo.suaextensao  >>  para retirar um arquivo da staging area
git reset <nome-do-arquivo>               >>  Remove o arquivo da staging area sem perder as alterações feitas no arquivo

git branch nomeDaBranchNova   >> Também cria nova branch

git branch  >>  mostra todas as branchs criadas

git checkout -b nomeDaBranch  >> Cria uma nova branch com nome desejado pelo usuario

git checkout nomeDaBranch OU nome da Tag>> Vai para a branch desejada atraves da inserção do nome da branch desejada no comando

git branch -d nomeDaBranch  >>  Deleta a branch que é informada no comando (Obs.: Tem que quer dela para poder apagar)

repositório original é chamado de remoto, com o nome "origem"

git request-pull -p nomeDaBranch"mestre"NoRemotoDe"origem" .   >>  enviar uma solicitação de pull pelo Git

step 1: git remote  >>  configura o repositório do outro desenvolvedor como um remoto 
step 2: git pull  >> usará o remoto do step 1 para pulls e solicitações de pull

git pull = git fetch + git merge

repositório simples  >> repositório que não tem uma árvore de trabalho, e tem  um nome que termina com .git

git init --bare  >>  criar um repositório simples no diretório compartilhado

git remote add origin ../nomeDoRepo  >>  configurar um remoto de "origem"

git branch --set-upstream-to origin/master  >>  informar o Git de qual branch ele deverá controlar

git remote set-url origin ../Shared.git  >>  alterar "origem" para que ele aponte para o repositório compartilhado

git stash >>  salva o estado da árvore de trabalho e do índice fazendo alguns commits temporários

git merge --ff-only nomeDaBranchQueDesejaMergear   >>  Um tipo de merge (mesclagem de avanço rápido) que só ocorre se a branch em que o usuario esta/ou a branch master não sofreu alteracao

git merge --abort >> Usado para restaurar o "mestre" para o que era antes da tentativa de mesclagem

git rebase nomeDoArquivo  >>   p/ juntar arquivos de duas branches sem gerar um novo evento

git log --stat    >>   serve para consultar commits e suas estatisticas abreviadas

git tag  >>  Mostra as tags criadas

git tag -d nomeDaTag >> Deleta a tag

git show nomeDaTag  >>  Detalhes da Tag

git tag 'inserirUmTexto'   >>   serve para marcar compromissos especificos

git tag -a nomeDaTag -m "mensagemDaTag"   >>  Cria um Tag Anotada

git config --global user.name "seuNome"
git config --global user.email "seuEmail"
git config --global credential.helper wincred >> Armazena as credenciais do usuário e não pede mais o login e senha 

git commit --amend   >>  para editar a mensagem do ultimo commit

git ignore >> Lista todos os arquivos e padrões que estão fora do versionamento
git ignore "*.txt" >> Remove todos os arquivos *.txt do versionamento
