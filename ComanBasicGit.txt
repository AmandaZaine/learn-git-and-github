my rep: https://github.com/AmandaZaine/learn-git-and-github.git

Comandos básicos:

cd nomedapasta >> serve para entrar em uma pasta

cd local1/local2/local3 >> serve para entra na pasta desejada com apenas um comando

cd ..  >> serve para sair de uma pasta/”volta para pasta anterior”

ls  >> serve para ver oque tem dentro da pasta/”mostra para onde pode ir”

clear  >> limpar comandos da tela

git init >> cria um repositório na pasta atual da sua localização atual de acordo com o terminal  //

git status >> status atual do seu repositório

git add nomedoarquivo.suaextensao >> adiciona o arquivo no seu controle de versao

git add *.txt  >> adiciona todos os arquivos txt

git add .  >> adiciona todos os arquivos que estiverem no seu diretório

git add *.extensao  >> adiciona todos os arquivos de uma determinada extensão

git add -A  >> adiciona todos os arquivos que tem na pasta e atualiza o repositório

	git add >> sai do work directory e vai/passa os arquivos para as "staging area"

git commit -m "Mensagem de identificação do commit"  >>  tira da staging area e manda para repositorio // commit=salvar  // congela uma determinada versão do código

	>> Working directory: local onde voce adiciona novos arquivos ou edita arquivos existentes

	>> Staging area: local para onde os arquivos vao quando usa-se o comando git add

	>> Repositorio: local para onde vai os arquivos quando voce usa o comando git commit // quando termina o trabalho

.gitignore  >>  nome de arquivo que o git ignora

git commit -a -m "Mensagem de identificação do commit"   >>  pula a etada do git add e vai direto para o git commit

git remote add origin linkdogithub  >>  define para onde estamos enviando o código

git push -u origin master  >>  envia para o github/envia alteração para repositorio remoto


git push  >> salva as atualizações no github

		~~ Comandos da aula 3 ~~

git diff  >> para consultar todas as informações do seu arquivo que está no seu diretorio mas ainda nao foi adicionado para a staging area 

git add . >> adiciona o arquivo na staging area

git diff --staged  >>  para saber oque está na staging area e que vai ser enviado para o proximo commit

git log  >>  mostra todos os commits que foram feitos/ historico de commit

git log -p  >> mostra informações detalhadas dos commits

q   >>  volta para o terminal

git log -p -n  >> mostra committs especificos // n = numeros de commits que voce quer que apareça

gitk  >> gera relatório com todas as modificações/alterações

		~~ Comandos Aula 4  ~~

git log --pretty=oneline  >>  serve para mostrar somente o código de cada commit e a mensagem desse commit

git add .   >   git commit --amend -m "Mensagem de indentificaçao do commit"     >>  edita o commit mais recente que foi feito

git reset HEAD nomedoarquivo.suaextensao  >>  para retirar um arquivo da staging area

git checkout -- nomedoarquivo.suaextensão   >>  para descartar as mudanças do seu diretório de trabalho // o arquivo volta ao estado inicial do ultimo commit que voce estava trabalhando

git rm nomedoarquivo.suaextensão  >>  para remover do repositório arquivos que foram deletados

pwd >> mostra em que pasta que terminal GitBash “está”

tab >> faz autocomplite

mkdir nomePastaNova  >> Cria uma pasta nova no local que o terminal “está”

touch >> cria arquivo novo dentro da pasta que o terminal “está”

open >> abre arquivo que esta dentro da pasta que o terminal “está”

code .   >> abre o visual code na pasta q vc esta com os arquivos que tem dentro

rmdir NomeDasPastas >> q quer deletar/remove diretorio em branco

rm nomeDoArquvio >> deleta arquivo especifico

rm -r nomeDaPasta >> q quer deletar, pasta q tem arquivo dentro

cp >> copiar arquivo 

mv  >> mover arquivo

quit ou exit >> sai do GitBash

git –help >> ver comandos do GitBash

git –version     //  git --version

git checkout >> apaga modificações no arquivo

git pull >> pega infos do rep online e envia para rep local no computador

npm start  >> Abrir arquivo pelo GitBash

npm install

cat .git/config

git log

git pull upstream master

git remote add upstream  ""

git push origin master
 
git merge

git pull

git remote -v

git clone linkPegoNoCloneOrDownloadNoGitHub

node -v

npm -v

node

npm install

npm start

npm run test

git pull upstream master

git pull origin master

git push origin nomedabranch

git pull upstream nomeDaBranch

git pull origin nomeDaBranch

git merge

git restore .

git checkout -b nomeDaBranch

npm init

npm install eslint

npm install --save-dev jest

--save-dev jest

// Comando de NPM IMPORTANTES
npm init
npm init -y
npm i eslint
npm install jest --save-dev
npm run eslint
npm link
npm unlink
eslint index.js
cat package.json
git config --list
npm install eslint
npm i firebase
_________________
npm init -y
npm install jsdom
npm install

// Comando para executar Node.js
node .
node NomeDoArquivoQueQuerExecutar



